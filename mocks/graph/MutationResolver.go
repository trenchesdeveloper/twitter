// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "github.com/trenchesdeveloper/tweeter/graph/models"
)

// MutationResolver is an autogenerated mock type for the MutationResolver type
type MutationResolver struct {
	mock.Mock
}

// Login provides a mock function with given fields: ctx, loginInput
func (_m *MutationResolver) Login(ctx context.Context, loginInput *models.LoginInput) (*models.AuthResponse, error) {
	ret := _m.Called(ctx, loginInput)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *models.AuthResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.LoginInput) (*models.AuthResponse, error)); ok {
		return rf(ctx, loginInput)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.LoginInput) *models.AuthResponse); ok {
		r0 = rf(ctx, loginInput)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.AuthResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.LoginInput) error); ok {
		r1 = rf(ctx, loginInput)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Logout provides a mock function with given fields: ctx
func (_m *MutationResolver) Logout(ctx context.Context) (bool, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Logout")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (bool, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: ctx, registerInput
func (_m *MutationResolver) Register(ctx context.Context, registerInput *models.RegisterInput) (*models.AuthResponse, error) {
	ret := _m.Called(ctx, registerInput)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 *models.AuthResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.RegisterInput) (*models.AuthResponse, error)); ok {
		return rf(ctx, registerInput)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.RegisterInput) *models.AuthResponse); ok {
		r0 = rf(ctx, registerInput)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.AuthResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.RegisterInput) error); ok {
		r1 = rf(ctx, registerInput)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMutationResolver creates a new instance of MutationResolver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMutationResolver(t interface {
	mock.TestingT
	Cleanup(func())
}) *MutationResolver {
	mock := &MutationResolver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
